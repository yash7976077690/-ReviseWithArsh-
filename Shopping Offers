bool operator >= (const vector<int>& a, const vector<int>& b)
{
    for (int i = 0; i < a.size(); ++i)
    {
        if (a[i] < b[i]) return false;
    }
    return true;
}
int operator* (const vector<int>& a, const vector<int>& b)
{
    int res = 0;
    for (int i = 0; i < a.size(); ++i)
    {
        res += a[i] * b[i];
    }
    return res;
}
void operator-= (vector<int>& a, vector<int>& b)
{
    for (int i = 0; i < a.size(); ++i)
    {
        a[i] -= b[i];
    }
}
void operator += (vector<int>& a, vector<int>& b)
{
    for (int i = 0; i < a.size(); ++i)
    {
        a[i] += b[i];
    }
}
class Solution123 {
public:
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        int cost = needs * price;
        for (auto s : special)
        {
            if (cost < s.back()) continue;
            if (needs > s)
            {
                needs -= s;
                cost = min(cost, s.back() + shoppingOffers(price, special, needs));
                needs += s;
            }
        }
        return cost;
    }
};
class Solution {
public:
    unordered_map<string, int> m;
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        string s;
        for (int i : needs)
        {
            s.append(1, i);
        }
        if (m.count(s)) 
            return m[s];

        int cost = needs * price;

        for (auto& spe : special) {
            if (spe.back() > cost) continue;
            if (needs >= spe) {
                needs -= spe;
                cost = min(cost, spe.back() + shoppingOffers(price, special, needs));
                needs += spe;
            }
        }
        m[s] = cost;
        return cost;
    }
};
